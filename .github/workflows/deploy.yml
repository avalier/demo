name: Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy'
        required: false
        default: 'dev'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Format
        id: tf-format
        working-directory: ./iac
        run: terraform fmt -check

      - name: Terraform Init
        id: tf-init
        working-directory: ./iac
        run: terraform init

      - name: Terraform Set Variables
        id: tf-set-variables
        working-directory: ./.bin/
        env:
          TFC_ORG: ${{secrets.TFC_ORG}}
          TFC_ADDR: ${{secrets.TFC_ADDR}}
          TFC_TOKEN: ${{secrets.TFC_TOKEN}}
          TFC_WORKSPACE: avalier-demo
        run: |
          ./terraform-set-variable.sh "AWS_ACCESS_KEY_ID" "${{secrets.AWS_ACCESS_KEY_ID}}"
          ./terraform-set-variable.sh "AWS_SECRET_ACCESS_KEY" "${{secrets.AWS_SECRET_ACCESS_KEY}}"
          ./terraform-set-variable.sh "TF_VAR_ecr_registry" "${{secrets.AWS_DOCKER_REGISTRY}}" false
          ./terraform-set-variable.sh "TF_VAR_domain_name" "${{secrets.DOMAIN_NAME}}" false

      - name: Terraform Validate
        id: tf-validate
        working-directory: ./iac
        run: terraform validate

      - name: Terraform Plan
        id: tf-plan
        working-directory: ./iac
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.tf-plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./iac
        run: terraform apply -auto-approve
