name: CI (avalier-demo-api)
on:
  push:
    #branches:
    #  - develop
    paths:
      - 'iac/avalier-demo-api.tf'
      - 'modules/avalier-demo-api/**'
      - '.github/workflows/avalier-demo-api-ci.yml'
      - '.github/actions/**'
      - '!README.md'
  pull_request:
    paths:
      - 'iac/avalier-demo-api.tf'
      - 'modules/avalier-demo-api/**'
      - '.github/workflows/avalier-demo-api-ci.yml'
      - '.github/actions/**'
      - '!README.md'

jobs:

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    env:
      COVERAGE_THRESHOLD: 75
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      #- name: Scan SAST (using Semmle/CodeQL) - Initialize
      #  uses: github/codeql-action/init@v1
      #  with:
      #    languages: 'csharp'

      - name: Build
        run: |
          mkdir -p .out
          cd ${{github.workspace}}/modules/avalier-demo-api
          dotnet restore Avalier.Demo.sln
          dotnet build Avalier.Demo.sln

      - name: Scan nuget dependencies (using dotnet cli)
        run: |
          dotnet list ${{github.workspace}}/modules/avalier-demo-api/Avalier.Demo.sln package --vulnerable

      - name: Test
        run: |
          dotnet tool install dotnet-reportgenerator-globaltool -g
          ${{github.workspace}}/.bin/avalier-demo-api/test.sh $COVERAGE_THRESHOLD ${{github.workspace}}/modules/avalier-demo-api/Avalier.Demo.sln

      - name: Save artifacts (coverage)
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: .out/coverage/

  scan_sca_owasp:
    name: Scan SCA (using OWASP DependencyCheck)
    if: ${{ true }}
    #needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build
        run: |
          mkdir -p .out/
          dotnet restore ./modules/avalier-demo-api/Avalier.Demo.sln

      - name: Scan SCA (using OWASP Dependency Check)
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'Avalier.Demo'
          path: './modules/avalier-demo-api'
          format: 'SARIF'    

      - name: Move artifacts
        run: |
          cp ${{github.workspace}}/reports/* ${{github.workspace}}/.out/

      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
           name: scan-sca-owasp-dependencycheck
           path: ./.out/dependency-check-report.sarif

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./.out/dependency-check-report.sarif

  scan_sca_veracode:
    name: Scan SCA (using Veracode)
    if: ${{ false }}
    #needs: [ build ]
    runs-on: ubuntu-latest
    env:
      VERACODE_API_TOKEN: ${{ secrets.VERACODE_API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore
        run: |
          mkdir -p .out/
          dotnet restore ${{github.workspace}}/modules/avalier-demo-api/Avalier.Demo.sln
          
      - name: Scan using Veracode
        id: scan
        run: |
           ${{github.workspace}}/.bin/avalier-demo-api/scan-sca-using-veracode.sh ${{github.workspace}}/modules/avalier-demo-api
      
      - name: Extract run logs
        run: |
          echo ${{ steps.scan.outputs.stdout }}

      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
           name: scan-sca-veracode
           path: ./

  scan_sast_codeql:
    name: Scan SAST (using CodeQL)
    if: ${{ true }}
    #needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Scan SAST (using Semmle/CodeQL) - Initialize
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'

      - name: Build
        run: |
          mkdir -p ./.out
          cd modules/avalier-demo-api
          dotnet restore
          dotnet build

      - name: Scan SAST (using Semmle/CodeQL) - Analyze
        uses: github/codeql-action/analyze@v1
        with:
          output: './.out/scan-sast/github-codeql'

      - name: Save artifacts (SAST - CodeQL)
        uses: actions/upload-artifact@v2
        with:
          name: scan-sast-github-codeql
          path: './.out/scan-sast/github-codeql'

  scan_sast_scs:
    name: Scan SAST (using Security Code Scan)
    if: ${{ false }}
    #needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build
        run: |
          mkdir -p ./.out/
          dotnet restore ./modules/avalier-demo-api/Avalier.Demo.sln
          dotnet build ./modules/avalier-demo-api/Avalier.Demo.sln

      - name: Scan SAST (using Security Code Scan)
        run: |
          dotnet tool install --global security-scan
          security-scan --export=./.out/scan-sast-securitycodescan.sarif ./modules/avalier-demo-api/Avalier.Demo.sln

      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
           name: scan-sast-securitycodescan
           path: .out/

      #- name: Save artifacts
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: scan-sast-securitycodescan
      #    path: ./.out/scan-sast-securitycodescan.sarif
        
      #- name: Upload scan results
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    sarif_file: ./.out/scan-sast-securitycodescan.sarif

  #https://help.veracode.com/r/c_about_github
  #https://help.veracode.com/r/r_pipeline_scan_commands
  #https://github.com/marketplace/actions/veracode-static-analysis-pipeline-scan-and-sarif-import
  scan_sast_veracode:
    name: Scan SAST (using Veracode Pipeline Scan)
    if: ${{ false }}
    #needs: build
    runs-on: ubuntu-latest
    env:
      VERACODE_ID: ${{ secrets.VERACODE_ID }}
      VERACODE_KEY: ${{ secrets.VERACODE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Build
        run: |
          dotnet restore ${{github.workspace}}/modules/avalier-demo-api/Avalier.Demo.sln
          dotnet build ${{github.workspace}}/modules/avalier-demo-api/Avalier.Demo.sln

      - name: Scan SAST (using Veracode Pipeline Scan)
        id: scan
        run: |
          ${{github.workspace}}/.bin/avalier-demo-api/scan-sast-using-veracode.sh ${{github.workspace}}/modules/avalier-demo-api/Avalier.Demo.Host/bin/Debug/netcoreapp5.0/
          echo "::set-output name=exitCode::$?"

      #- name: Convert pipeline scan output to SARIF format
      #  id: convert
      #  if: ${{ always() }}
      #  uses: Veracode/veracode-pipeline-scan-results-to-sarif@v0.1.2
        #with:
        #  pipeline-results-json: results.json
        #  output-results-sarif: scan-sast-veracode.sarif
        #  finding-rule-level: "4:3:0"

      - name: Save artifacts (SAST - Veracode)
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: scan-sast-veracode
          path: results.json

      #- name: Upload scan results
      #  if: ${{ always() }}
      #  uses: github/codeql-action/upload-sarif@v1
      #  with: # Path to SARIF file relative to the root of the repository
      #    sarif_file: veracode-results.sarif

  package_veracode:
    name: Package and Scan (Veracode)
    if: ${{ false }}
    #needs: [ build, scan_sca_owasp, scan_sast_codeql ]
    runs-on: ubuntu-latest
    env:
      VERACODE_API_TOKEN: ${{ secrets.VERACODE_API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Package - Build an image from Dockerfile
        run: |
          docker build -t avalier/demo:${{github.sha}} ${{github.workspace}}/modules/avalier-demo-api
          
      - name: Scan using Veracode
        run: |
          ${{github.workspace}}/.bin/avalier-demo-api/scan-image-using-veracode.sh avalier/demo:${{github.sha}}

      #- name: Upload scan results
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    sarif_file: 'trivy-results.sarif'

  package_trivy:
    name: Package and Scan (Trivy)
    if: ${{ true }}
    needs: [ build, scan_sca_owasp, scan_sast_codeql ]
    runs-on: ubuntu-latest
    env:
      OUTPUT_PATH: '.out/scan-container'
      IMAGE_NAME: avalier-demo-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Package - Build an image from Dockerfile
        run: |
          docker build -t $IMAGE_NAME ${{github.workspace}}/modules/avalier-demo-api
          
      - name: Setup
        run: |
          mkdir -p $OUTPUT_PATH

      - name: Scan using Aquasec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.IMAGE_NAME}}
          format: 'template'
          template: '@/contrib/sarif.tpl' 
          output: "${{ env.OUTPUT_PATH }}/trivy-results.sarif"
      
      - name: Save artifacts (Container - Trivy)
        uses: actions/upload-artifact@v2
        with:
          name: scan-container-aquasec-trivy
          path: "${{ env.OUTPUT_PATH }}/trivy-results.sarif"

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "${{ env.OUTPUT_PATH }}/trivy-results.sarif"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push docker image (sha)
        uses: ./.github/actions/bhp-ecr-docker-push
        with:
          ecrRegistry: ${{ steps.login-ecr.outputs.registry }}
          imageName: ${{env.IMAGE_NAME}}
          imageTag: ${{github.sha}} 

      - name: Push docker image (dev)
        uses: ./.github/actions/bhp-ecr-docker-push
        with:
          ecrRegistry: ${{ steps.login-ecr.outputs.registry }}
          imageName: ${{env.IMAGE_NAME}}
          imageTag: dev

  deploy:
    name: Deploy
    if: ${{ true }}
    needs: [ package_trivy ]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger/dispatch deploy workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          token: ${{ secrets.PAT}}
          inputs: |
            { 
              "environment": "test"
            }

  
